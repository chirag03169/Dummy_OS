#include <iostream>
#include <string>
#include <queue>
#include <unordered_map>
#include <vector>
#include <list>

// ---------------- File System -------------------

struct FileNode {
    std::string fileName;
    std::string data;
    int address;             // The memory address of the file (or any identifier)
    FileNode* next;          // Pointer to the next file node

    // Constructor to initialize a FileNode
    FileNode(const std::string& name, const std::string& content, int addr) 
        : fileName(name), data(content), address(addr), next(nullptr) {}
};

class FileSystem {
    FileNode* head;          // Head of the linked list (first file)

public:
    FileSystem() : head(nullptr) {}  // Constructor initializes an empty list

    // Create a new file and add it to the linked list
    void createFile(const std::string& name, const std::string& content, int addr) {
        FileNode* newFile = new FileNode(name, content, addr);

        if (head == nullptr) {
            head = newFile;   // If the list is empty, the new file becomes the head
        } else {
            // Traverse to the end of the list and insert the new file
            FileNode* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newFile;
        }
    }

    // Delete a file from the linked list based on file name
    void deleteFile(const std::string& name) {
        if (head == nullptr) {
            std::cout << "No files to delete.\n";
            return;
        }

        // If the file to be deleted is the head
        if (head->fileName == name) {
            FileNode* temp = head;
            head = head->next;
            delete temp;
            std::cout << "File " << name << " deleted.\n";
            return;
        }

        // Traverse the list to find the file to delete
        FileNode* current = head;
        FileNode* previous = nullptr;

        while (current != nullptr && current->fileName != name) {
            previous = current;
            current = current->next;
        }

        // If file not found
        if (current == nullptr) {
            std::cout << "File not found.\n";
            return;
        }

        // Remove the file from the list
        previous->next = current->next;
        delete current;
        std::cout << "File " << name << " deleted.\n";
    }

    // Display all the files in the linked list
    void displayFiles() const {
        if (head == nullptr) {
            std::cout << "No files stored.\n";
            return;
        }

        FileNode* temp = head;
        while (temp != nullptr) {
            std::cout << "File Name: " << temp->fileName << ", Data: " << temp->data 
                      << ", Address: " << temp->address << std::endl;
            temp = temp->next;
        }
    }
};

// ---------------- Process Scheduler -------------------

struct Process {
    int processId;
    int priority;
    std::string state;

    // Constructor to initialize a process
    Process(int id, int prio, const std::string& st) : processId(id), priority(prio), state(st) {}

    // Comparison operator to prioritize based on the process priority
    bool operator<(const Process& other) const {
        return priority < other.priority;  // Higher priority processes come first
    }
};

class ProcessScheduler {
    std::priority_queue<Process> processQueue;

public:
    // Add a process to the queue
    void addProcess(Process p) {
        processQueue.push(p);
    }

    // Schedule and run the highest priority process
    void scheduleProcess() {
        if (!processQueue.empty()) {
            Process p = processQueue.top();
            processQueue.pop();
            std::cout << "Running process with ID: " << p.processId << " and Priority: " << p.priority << std::endl;
        } else {
            std::cout << "No process to schedule.\n";
        }
    }

    // Display all processes in the queue
    void displayProcesses() const {
        std::priority_queue<Process> tempQueue = processQueue;
        while (!tempQueue.empty()) {
            Process p = tempQueue.top();
            std::cout << "Process ID: " << p.processId << ", Priority: " << p.priority << ", State: " << p.state << std::endl;
            tempQueue.pop();
        }
    }
};

// ---------------- Memory Manager -------------------

class MemoryManager {
    std::vector<int> memory;       // Memory is simulated as a vector
    std::list<int> freeBlocks;     // Keeps track of free memory blocks

public:
    // Constructor initializes the memory size and marks all as free (-1)
    MemoryManager(int size) : memory(size, -1) {
        freeBlocks.push_back(0);   // Initially, the entire memory is free
    }

    // Allocate memory and return the starting address, -1 if not enough space
    int allocateMemory(int size) {
        for (auto it = freeBlocks.begin(); it != freeBlocks.end(); ++it) {
            int startBlock = *it;
            if (startBlock + size <= memory.size()) {
                std::fill(memory.begin() + startBlock, memory.begin() + startBlock + size, 1);  // Mark memory as allocated
                freeBlocks.erase(it);  // Remove this block from free list
                return startBlock;     // Return the start address
            }
        }
        return -1;  // Not enough memory
    }

    // Free memory starting from a specific address
    void freeMemory(int startAddress, int size) {
        std::fill(memory.begin() + startAddress, memory.begin() + startAddress + size, -1);  // Mark memory as free
        freeBlocks.push_back(startAddress);  // Add this block back to the free list
    }

    // Display the current memory state
    void displayMemory() const {
        for (int i = 0; i < memory.size(); ++i) {
            std::cout << memory[i] << " ";
        }
        std::cout << std::endl;
    }
};

// ---------------- Main -------------------

int main() {
    FileSystem fs;
    ProcessScheduler ps;
    MemoryManager mm(10);  // Create memory manager with 10 units of memory

    // File system operations
    std::cout << "---- File System ----" << std::endl;
    fs.createFile("file1.txt", "This is file 1.", 1000);
    fs.createFile("file2.txt", "This is file 2.", 1001);
    fs.createFile("file3.txt", "This is file 3.", 1002);
    fs.displayFiles();

    fs.deleteFile("file2.txt");
    std::cout << "\nAfter deleting file2.txt:\n";
    fs.displayFiles();

    // Process scheduler operations
    std::cout << "\n---- Process Scheduler ----" << std::endl;
    ps.addProcess(Process(1, 10, "Running"));
    ps.addProcess(Process(2, 5, "Waiting"));
    ps.addProcess(Process(3, 7, "Ready"));

    ps.displayProcesses();
    ps.scheduleProcess();  // Run the highest priority process

    // Memory manager operations
    std::cout << "\n---- Memory Manager ----" << std::endl;
    mm.displayMemory();

    int addr1 = mm.allocateMemory(4);  // Allocate 4 units of memory
    std::cout << "Memory after allocation of 4 units:" << std::endl;
    mm.displayMemory();

    mm.freeMemory(addr1, 4);  // Free 4 units of memory
    std::cout << "Memory after freeing 4 units:" << std::endl;
    mm.displayMemory();

    return 0;
}
